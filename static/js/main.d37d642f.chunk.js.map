{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducers.js","redux/store.js","components/Container/Container.styled.js","components/Container/Container.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/Form/ContactsForm.styled.js","redux/contacts/contacts-selectors.js","components/Form/ContactsForm.jsx","components/Contacts/ContactsList.styled.js","components/Contacts/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","App.jsx","index.js"],"names":["addContact","createAction","deleteContact","getFilterValue","contacts","createReducer","id","name","number","actions","state","payload","some","alert","filter","contact","_","combineReducers","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","phonebook","persistReducer","contactsReducer","devTools","process","persistor","persistStore","StyledWrapper","Container","children","Wrapper","Title","Section","title","Form","Input","Label","Button","getContactsList","getFiltredContactsList","normalizedFilter","toLowerCase","includes","ContactsForm","useState","setName","setNumber","dispatch","useDispatch","useSelector","nameInputId","nanoid","telInputId","handleChange","event","target","value","resetForm","onSubmit","preventDefault","htmlFor","type","placeholder","pattern","onChange","required","Contacts","Item","ContactsList","map","size","color","onClick","Filter","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.d37d642f.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n\nconst addContact = createAction(\"phonebook/add\");\nconst deleteContact = createAction(\"phonebook/delete\");\nconst getFilterValue = createAction(\"filter/get\");\n\nexport { addContact, deleteContact, getFilterValue };\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport * as actions from \"redux/contacts/contacts-actions\";\n\nconst initialState = [\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n];\n\nconst contacts = createReducer(initialState, {\n  [actions.addContact]: (state, { payload }) =>\n    state.some(({ name }) => name === payload.name)\n      ? alert(`Contact ${payload.name} already exists`)\n      : [payload, ...state],\n\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter((contact) => contact.id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [actions.getFilterValue]: (_, { payload }) => payload,\n});\nexport default combineReducers({\n  contacts,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport logger from \"redux-logger\";\nimport storage from \"redux-persist/lib/storage\";\nimport contactsReducer from \"./contacts/contacts-reducers\";\n\nconst persistConfig = {\n  key: \"phonebook\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    phonebook: persistReducer(persistConfig, contactsReducer),\n  },\n  devTools: process.env.NODE_ENV !== \"production\",\n  middleware,\n});\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","import styled from \"@emotion/styled/macro\";\n\nexport const StyledWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  padding: 30px;\n  background-color: #ffffff;\n  border-radius: 5px;\n  border: 5px solid lightsteelblue;\n  width: 600px;\n`;\n","import PropTypes from \"prop-types\";\nimport { StyledWrapper } from \"./Container.styled\";\n\nexport const Container = ({ children }) => {\n  return <StyledWrapper>{children}</StyledWrapper>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import styled from \"@emotion/styled/macro\";\n\nexport const Wrapper = styled.section`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 30px;\n  padding-bottom: 30px;\n`;\n\nexport const Title = styled.h2`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 20px;\n\n  text-transform: uppercase;\n  font-size: 28px;\n  font-weight: 700;\n  color: steelblue;\n`;\n","import PropTypes from \"prop-types\";\nimport { Wrapper, Title } from \"./Section.styled\";\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <Title>{title}</Title>\n      {children}\n    </Wrapper>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import styled from \"@emotion/styled/macro\";\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Input = styled.input``;\n\nexport const Label = styled.label`\n  margin-bottom: 10px;\n`;\n\nexport const Button = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 100px;\n  padding: 10px 12px;\n  margin-top: 15px;\n\n  font-size: 14px;\n  font-weight: 700;\n  color: #fff;\n  background-color: steelblue;\n  border: 1px solid transparent;\n  border-radius: 5px;\n  cursor: pointer;\n  text-transform: capitalize;\n\n  &:hover,\n  &:focus {\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\n  }\n`;\n","export const getFilterValue = (state) => state.phonebook.filter;\n\nexport const getContactsList = (state) => state.phonebook.contacts;\n\nexport const getFiltredContactsList = (state) => {\n  const filter = getFilterValue(state);\n  const contacts = getContactsList(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(\n    ({ name, number }) =>\n      name.toLowerCase().includes(normalizedFilter) ||\n      number.includes(normalizedFilter)\n  );\n};\n","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"redux/contacts/contacts-actions\";\nimport { nanoid } from \"nanoid\";\nimport { Form, Input, Label, Button } from \"./ContactsForm.styled\";\nimport { getContactsList } from \"redux/contacts/contacts-selectors\";\n\nfunction ContactsForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContactsList);\n\n  let nameInputId = nanoid(3);\n  let telInputId = nanoid(3);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (contacts.some((contact) => contact.name === name)) {\n      alert(`Contact ${name} already exists`);\n\n      return;\n    }\n\n    dispatch(actions.addContact({ id: nanoid(3), name, number }));\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor={`id-${nameInputId}`}>Name</Label>\n      <Input\n        id={`id-${nameInputId}`}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        value={name}\n        onChange={handleChange}\n        required\n      />\n\n      <Label htmlFor={`id-${telInputId}`}>Number</Label>\n      <Input\n        id={`id-${telInputId}`}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"+38 (XXX) XXX-XX-XX\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        value={number}\n        onChange={handleChange}\n        required\n      />\n\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n}\n\nexport default ContactsForm;\n","import styled from \"@emotion/styled/macro\";\n\nexport const Contacts = styled.ul`\n  margin-top: 20px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  padding: 10px;\n  border: 1px solid silver;\n  overflow: hidden;\n  border-radius: 5px;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n\n  & span {\n    display: inline-flex;\n    align-items: center;\n    margin-left: 10px;\n    margin-right: 40px;\n  }\n\n  & svg {\n    margin-right: 5px;\n  }\n`;\n\nexport const Button = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 100px;\n  padding: 10px;\n  margin-left: 10px;\n  margin-right: 10px;\n\n  font-size: 14px;\n  font-weight: 700;\n  color: #fff;\n  background-color: steelblue;\n  border: 1px solid transparent;\n  border-radius: 5px;\n  cursor: pointer;\n  text-transform: capitalize;\n\n  &:hover,\n  &:focus {\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\n  }\n`;\n","import { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"redux/contacts/contacts-actions\";\nimport PropTypes from \"prop-types\";\nimport { Contacts, Item, Button } from \"./ContactsList.styled\";\nimport { IoPerson } from \"react-icons/io5\";\nimport { ImPhone } from \"react-icons/im\";\nimport { getFiltredContactsList } from \"redux/contacts/contacts-selectors\";\n\nfunction ContactsList() {\n  const contacts = useSelector(getFiltredContactsList);\n  const dispatch = useDispatch();\n\n  return (\n    <Contacts>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <Item key={id}>\n            <span>\n              <IoPerson size={14} color=\"steelblue\" />\n              {name}:\n            </span>\n\n            <span>\n              <ImPhone size={14} color=\"steelblue\" />\n              {number}\n            </span>\n            <Button\n              type=\"button\"\n              onClick={() => dispatch(actions.deleteContact(id))}\n            >\n              Delete\n            </Button>\n          </Item>\n        );\n      })}\n    </Contacts>\n  );\n}\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n};\n\nexport default ContactsList;\n","import styled from \"@emotion/styled/macro\";\n\nexport const Label = styled.label`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nexport const Input = styled.input``;\n","import { useSelector, useDispatch } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { nanoid } from \"nanoid\";\nimport { Label, Input } from \"./Filter.styled\";\nimport * as actions from \"redux/contacts/contacts-actions\";\nimport { getFilterValue } from \"redux/contacts/contacts-selectors\";\n\nconst Filter = () => {\n  const filter = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Label htmlFor={`id-${nanoid(3)}`}>Find contacts by name</Label>\n      <Input\n        id={`id-${nanoid(3)}`}\n        type=\"text\"\n        name=\"name\"\n        value={filter}\n        onChange={(event) =>\n          dispatch(actions.getFilterValue(event.target.value))\n        }\n        placeholder=\"Search\"\n      />\n    </>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n\nexport default Filter;\n","import { Container } from \"components/Container/Container\";\nimport { Section } from \"components/Section/Section\";\nimport ContactsForm from \"components/Form/ContactsForm\";\nimport ContactsList from \"components/Contacts/ContactsList\";\nimport Filter from \"components/Filter/Filter\";\n\nfunction App() {\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <ContactsForm />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactsList />\n      </Section>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { store, persistor } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}